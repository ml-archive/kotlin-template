// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.versions = [
            kotlin           : '1.3.61',
            coroutines       : '1.3.2',
            constraint_layout: '2.0.0-beta4',
            dagger           : "2.25.4",
            lifecycle        : "2.2.0",
            timber           : "4.7.1",
            junit            : '4.12',
            espresso         : '3.2.0',
            mockito          : '2.28.2',
            nstack           : '3.2.2',
            nodes_arch       : '2.3.5',
            retrofit         : "2.7.1",
            okhttp           : "3.14.2",
            ktx              : "1.2.0-rc01",
            material         : '1.2.0-alpha02',
            archCore         : '2.1.0',
            navigation       : '2.2.0-rc04',
            moshi            : '1.9.2'
    ]

    ext.keys = [
            appId       : 'bOdrNuZd4syxuAz6gyCb3xwBCjA8U4h4IcQI',
            apiKey      : 'X0ENl5QpKI51tS9CzKSt1PGwfZeq2gBMTU58',
            acceptHeader: "da-DK"
    ]

    ext.sdks = [
            compileSdkVersion: 29,
            buildToolsVersion: '29.0.0',
            minSdkVersion    : 21,
            targetSdkVersion : 29
    ]

    repositories {
        mavenCentral()
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "dk.nodes.nstack:translation:3.2.2"
        classpath "com.github.gfx.ribbonizer:ribbonizer-plugin:2.1.0"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.26.0"
    id 'com.github.ben-manes.versions' version "0.27.0"
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://maven.google.com' }
        jcenter()
        mavenLocal()
    }
}


subprojects {
    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        format 'misc', {
            target '**/*.gradle'
            trimTrailingWhitespace()
            indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
            endWithNewline()
        }
        kotlin {
            target "**/*.kt"
            ktlint('0.33.0')
            targetExclude("**/RateReminderActions.kt")
        }
        java {
            target "**/*.java"
            targetExclude '**/Translation.java'
            googleJavaFormat('1.1').aosp()
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            // Treat all Kotlin warnings as errors, don't go full retarded
            // allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}