apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion sdks.compileSdkVersion
    buildToolsVersion sdks.buildToolsVersion
    flavorDimensions "default"

    defaultConfig {
        applicationId "dk.nodes.template"
        minSdkVersion sdks.minSdkVersion
        targetSdkVersion sdks.targetSdkVersion
        multiDexEnabled true
        versionCode 1
        versionName "2.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                appId : keys.appId,
                apiKey: keys.apiKey
        ]

        packagingOptions {
            pickFirst("META-INF/atomicfu.kotlin_module")
        }
    }

    // Uncomment the following if you include signingConfigs
    /*
    signingConfigs {
        staging {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
        production {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
    }
    */

    buildTypes {
        debug {
            // uncomment the following line if you add a flavorbased signingConfig for debug builds
            // signingConfig null
        }
        release {
            buildConfigField "String", "API_URL", "\"https://jsonplaceholder.typicode.com\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        // The dev flavor is intended to be the same as staging, but with LeakCanary enabled
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [APP_NAME: "KotlinTemplateDev"]
            buildConfigField "String", "API_URL", "\"https://jsonplaceholder.typicode.com\""
        }
        staging {
            dimension "default"
            applicationIdSuffix ".staging"
            //signingConfig signingConfigs.staging
            manifestPlaceholders = [APP_NAME: "KotlinTemplateStaging"]
            buildConfigField "String", "API_URL", "\"https://jsonplaceholder.typicode.com\""
        }
        production {
            dimension "default"
            applicationIdSuffix ".production"
            //signingConfig signingConfigs.production
            manifestPlaceholders = [APP_NAME: "KotlinTemplate"]
            buildConfigField "String", "API_URL", "\"https://jsonplaceholder.typicode.com\""
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    maven { url "https://jitpack.io" }
    mavenLocal()
}

dependencies {

    fileTree(dir: "libs", include: ["*.jar"])
    androidTestImplementation("androidx.test.espresso:espresso-core:${versions.espresso}", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    implementation project (':domain:core')
    implementation project (':domain:common')
    implementation project (':domain:data')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "com.google.android.material:material:$versions.material"
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "com.jakewharton.timber:timber:${versions.timber}"

    implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}")
    implementation("com.squareup.retrofit2:converter-gson:${versions.retrofit}") {
        exclude module: "retrofit:${versions.retrofit}"
    }

    // Nodes OkHTTP utilities
    implementation "dk.nodes.utils:okhttp:${versions.nodes_utils_okhttp}"

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation("com.squareup.okhttp3:logging-interceptor:${versions.okhttp}")
    implementation "dk.nodes.nstack:nstack-kotlin:${versions.nstack}"

    // Testing
    testImplementation "junit:junit:${versions.junit}"
    // required if you want to use Mockito for unit tests
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    // required if you want to use Mockito for Android tests
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"

    // For Espresso UI testing
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"

    // The following section is only used to force the latest version to resolve conflicts
    implementation "androidx.arch.core:core-common:$versions.archCore"
    implementation "androidx.arch.core:core-runtime:$versions.archCore"
    implementation "androidx.lifecycle:lifecycle-livedata-core-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.core:core-ktx:${versions.ktx}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"

    implementation "androidx.preference:preference-ktx:${versions.preferences}"

    // Chucker (like Charles but on device)
    devImplementation "com.github.ChuckerTeam.Chucker:library-no-op:${versions.chucker}"
    stagingImplementation "com.github.ChuckerTeam.Chucker:library:${versions.chucker}"
    productionImplementation "com.github.ChuckerTeam.Chucker:library-no-op:${versions.chucker}"

    // LeakCanary
    devImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leak_canary}"

    // Java 8+ API desugaring support
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.desugaring"

}
